name: Django CI/CD with Docker & Elastic Beanstalk

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # ---------------------------
  # 1. TEST JOB (Continuous Integration)
  # ---------------------------
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
      AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
      AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      # Build docker images with secrets
      - name: Build Docker images
        run: |
          POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
          AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }} \
          AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }} \
          docker-compose build

      # Run migrations and tests inside docker
      - name: Run migrations and tests
        run: |
          POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
          AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }} \
          AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }} \
          docker-compose run --rm web sh -c "python manage.py migrate --noinput && python manage.py test"

  # ---------------------------
  # 2. DEPLOY JOB (Continuous Deployment)
  # ---------------------------
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Sync secrets to EB environment
      - name: Update EB environment variables
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name ${{ secrets.EB_ENV_NAME }} \
            --option-settings \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=AWS_STORAGE_BUCKET_NAME,Value=${{ secrets.AWS_STORAGE_BUCKET_NAME }} \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=AWS_S3_REGION_NAME,Value=${{ secrets.AWS_S3_REGION_NAME }} \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=POSTGRES_USER,Value=${{ secrets.POSTGRES_USER }} \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=POSTGRES_PASSWORD,Value=${{ secrets.POSTGRES_PASSWORD }} \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=DATABASE_NAME,Value=${{ secrets.DATABASE_NAME }}

      # Wait for EB environment to become Ready
      - name: Wait for EB environment to be Ready
        run: |
          echo "Checking EB environment status..."
          STATUS=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ secrets.EB_ENV_NAME }} \
            --query "Environments[0].Status" \
            --output text)

          TIMEOUT=900  # 15 minutes max
          ELAPSED=0
          INTERVAL=30

          while [ "$STATUS" != "Ready" ] && [ $ELAPSED -lt $TIMEOUT ]; do
            echo "Current EB status: $STATUS. Waiting $INTERVAL seconds..."
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            STATUS=$(aws elasticbeanstalk describe-environments \
              --environment-names ${{ secrets.EB_ENV_NAME }} \
              --query "Environments[0].Status" \
              --output text)
          done

          if [ "$STATUS" != "Ready" ]; then
            echo "ERROR: EB environment not ready after $TIMEOUT seconds."
            exit 1
          fi

          echo "EB environment is Ready. Proceeding with deploy."

      # Zip source code for deployment
      - name: Zip source code
        run: zip -r deploy.zip .

      # Install EB CLI
      - name: Install EB CLI
        run: |
          pip install --upgrade pip
          pip install awsebcli

      # Initialize EB application
      - name: Initialize EB application
        run: |
          eb init ${{ secrets.EB_APP_NAME }} --platform "Docker" --region ap-south-1

      # Select EB environment
      - name: Select EB environment
        run: |
          eb use ${{ secrets.EB_ENV_NAME }}

      # Deploy to EB
      - name: Deploy to Elastic Beanstalk
        run: eb deploy
